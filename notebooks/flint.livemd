# Flint

```elixir
Mix.install(
  [
    # {:flint, github: "acalejos/flint"},
    # {:flint, path: "/Users/andres/Documents/flint"},
    {:jason, "~> 1.4"},
    {:livebook, "~> 0.13.3"}
    # {:merquery, github: "acalejos/merquery"}
  ],
  force: true,
  consolidate_protocols: false
)
```

## Declare a Schema

```elixir
Livebook.Notebook.Cell.Code.new()
```

```elixir
defmodule Test do
  defmacro __using__(_opts) do
    quote do
      import Kernel, except: [=~: 2]
      import Test
    end
  end

  def left =~ "" when is_binary(left), do: true

  def left =~ right when is_binary(left) and is_binary(right) do
    :binary.match(left, right) != :nomatch
  end

  def left =~ right when is_binary(left) do
    Regex.match?(right, left)
  end

  def left =~ right do
    if is_nil(right), do: left
  end
end
```

```elixir
use Test

a =~ if(false, do: 1)
```

```elixir
defmodule Character do
  use Flint

  def strength("human", age) when age > 0 when age < 120, do: 50

  def strength("elf", age) when age > 0 when age < 100, do: 30
  def strength("elf", age) when age > 100 when age < 200, do: 60
  def strength("elf", age) when age > 200 when age < 300, do: 80
  def strength("elf", age) when age > 300 when age < 350, do: 95
  def strength("elf", age) when age > 350 when age < 400, do: 75
  def strength(_, _), do: nil

  embedded_schema do
    field! :type, :string, derive: &String.downcase/1, map: String.upcase(type) do
      type not in ~w[elf human] -> "Expected elf or human, got: #{type}"
    end

    field! :age, :integer do
      age < 0 ->
        "Nobody can have a negative age"

      type == "elf" and age > max_elf_age ->
        "Attention! The elf has become a bug! Should be dead already!"

      type == "human" and age > max_human_age ->
        "Expected human to have up to #{max_human_age}, got: #{age}"
    end

    field(:strength, :integer, derive: strength(type, age), gt: 0, lt: 100)
  end
end
```

```elixir
max_elf_age = 400
max_human_age = 120
Character.new!(%{type: "Orc", age: 10}, binding())
# Character.changeset(%Character{}, %{type: "Elf", age: 10}, binding())
```

```elixir
defmodule TestB do
  use Flint

  embedded_schema do
    field!(:description, Union, types: [:string, :binary])
  end
end
```

```elixir
TestB.new!(%{description: <<0, 255>>})
```

```elixir
type?.(:atom)
```

If you already have `Ecto` `embedded_schema`s that you want to convert to `Flint`, it's as easy as changing `use Ecto.Schema` to `use Flint`.

```elixir
defmodule Author_a do
  use Ecto.Schema

  @schema_prefix "Ecto"
  embedded_schema do
    field(:first_name)
    field(:last_name)
    field(:bio)
  end
end
```

```elixir
Author_a.__schema__(:primary_key) |> IO.inspect()
Author_a.__schema__(:prefix) |> IO.inspect()
Author_a.__schema__(:required)
```

Just declare the same schema using `Flint` and notice the differences

```elixir
defmodule Author_b do
  use Flint

  @schema_prefix "Flint"
  embedded_schema do
    field(:first_name)
    field(:last_name)
    field(:bio)
  end
end
```

```elixir
Author_b.__schema__(:primary_key) |> IO.inspect()
Author_b.__schema__(:prefix) |> IO.inspect()
Author_b.__schema__(:required)
```

Now there's by default no `primary_key` set for `embedded_schema` and now the `__schema__` reflection function accepts a new key -- `:required`

Let's show off what that's used for

```elixir
defmodule Author_c do
  use Flint

  embedded_schema do
    field!(:first_name)
    field!(:last_name)
    field(:bio, :string)
  end
end
```

```elixir
Author_c.__schema__(:required)
```

`Flint` provides `!` versions of `field`, `embeds_one`, and `embeds_many`, which will both mark the field as `:required` in the `__schema__` reflection function, and will also include a `validate_required` call in the default `changeset` implementation that `Flint` provides.

## Using Generated Functions

### `changeset`, `new`, and `new!`

<!-- livebook:{"break_markdown":true} -->

`Flint` provides generated and overridable default implementations of `changeset`, `new`, and `new!` functions.

```elixir
Author_c.changeset(%Author_c{}, %{})
```

As you can see, the generated `changeset` function automatically accounts for the required fields, and now you can use `changeset` as you would any other changeset.

You can also use the generated `new` and `new!` functions. `new` will create a new struct from the passed params and will apply the changes regardless of validation, as opposed to `new!`, which will `raise` on validation errors, but otherwise will apply any valid changes.

Let's take a look at a more practical example. In this example, we're:

* Using both normal and `!` variants of field declarations
* Using the shorthand notation where we pass the schema as an option to the `use Flint` call
* Using both external and inline `embeds` fields.
* Using an `Ecto.Enum` field type to map values between `embedded` and `dumped` representations.

```elixir
defmodule Book do
  use Flint,
    schema: [
      field!(:title, :string),
      embeds_one! :author, Author_d do
        field!(:first_name)
        field!(:last_name)
        field(:bio, :string)
      end,
      embeds_many(:coauthors, Author_c),
      field(:genre, Ecto.Enum, values: [biography: 0, science_fiction: 1, fantasy: 2, mystery: 3])
    ]
end
```

Now when we call `Book.new` it will create a new `Book` struct regardless of validation errors.

**Note that by `embeds_many(!)` fields will default to an empty list (`[]`) at all times, whereas `embeds_one!` defaults to `nil` as it marks the field as `:required`, whereas `embeds_one` defaults to the empty struct (of its embedding). You can control this behavior for `embeds_one` using the `defaults_to_struct` boolean option.**

```elixir
Book.new()
```

```elixir
Book.__schema__(:required)
```

```elixir
Book.new!(%{title: "The old man and the sea"})
```

The generated `changeset` functions will also enfore `:required` validations for embedded fields, so if any required field of the `:author` embedded field is not present, then `Book` will fail validation.

```elixir
Book.new!(%{
  title: "Harry Potter",
  author: %{first_name: "J.K."},
  genre: :fantasy
})
```

```elixir
book =
  Book.new!(%{
    title: "Harry Potter",
    author: %{first_name: "J.K.", last_name: "Rowling"},
    genre: :fantasy
  })
```

```elixir
defmodule Book_b do
  use Flint,
    schema: [
      field!(:title, :string),
      embeds_one :author, Author_c do
        field!(:first_name)
        field!(:last_name)
        field(:bio, :string)
      end,
      embeds_many(:coauthors, Author_d),
      field(:genre, Ecto.Enum, values: [biography: 0, science_fiction: 1, fantasy: 2, mystery: 3])
    ]
end
```

Note the quirk that if the embedded field is not marked as required, but one of its subfields is, then if the embedded struct is partially intialized it will fail if the required subfield is missing

```elixir
Book_b.new!(%{
  title: "Harry Potter",
  author: %{first_name: "J.K."},
  genre: :fantasy
})
```

Whereas if it is not passed altogether then it will pass validation.

```elixir
Book_b.new!(%{
  title: "Harry Potter",
  genre: :fantasy
})
```

### `Jason.Encoder`, `Access`, and `dump`

<!-- livebook:{"break_markdown":true} -->

`Flint` will also implement the `Access` behaviour for your schema structs, deferring to `Map` for all implementations.

If you have `Jason` as a dependency, `Flint` will also implement the `Jason.Encoder` protocol for each schema. The `Jason.Encoder` implementation will call `Ecto.embedded_dump(:json)` on your struct, which means that it will use whatever `dump` representation you set for each of your embedded schemas or declared types.

```elixir
book |> Flint.Schema.dump()
```

Notice how, when dumped, the `:genre` field is represented as the value from its `Ecto.Enum` keyword map.

```elixir
encoded_book = Jason.encode!(book)
```

```elixir
decoded_book = Jason.decode!(encoded_book)
```

Now when we encode and decode, we get back to the dumped representation.

If we want to convert back to the embedded representation, we just call `new` or `new!`

```elixir
Book.new!(decoded_book)
```
